"""
Load CSV v√†o MySQL s·ª≠ d·ª•ng Environment Variables
An to√†n h∆°n v√¨ kh√¥ng hardcode password trong code
"""
import os
import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def get_db_config():
    """L·∫•y config t·ª´ .env file"""
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'port': os.getenv('MYSQL_PORT', '3306'),
        'user': os.getenv('MYSQL_USER', 'root'),
        'password': os.getenv('MYSQL_PASSWORD'),
        'database': os.getenv('MYSQL_DATABASE', 'dss_db')
    }

def load_csv_secure():
    """
    Load CSV v√†o MySQL s·ª≠ d·ª•ng config t·ª´ .env
    """
    try:
        # L·∫•y config
        config = get_db_config()
        csv_file = os.getenv('CSV_FILE_PATH', 'online_retail.csv')
        batch_size = int(os.getenv('BATCH_SIZE', '1000'))
        
        # Ki·ªÉm tra password
        if not config['password']:
            print("‚ùå Ch∆∞a thi·∫øt l·∫≠p MYSQL_PASSWORD trong file .env")
            print("üí° T·∫°o file .env t·ª´ .env.example v√† ƒëi·ªÅn th√¥ng tin")
            return False
        
        # T·∫°o connection string
        connection_string = (
            f"mysql+pymysql://{config['user']}:{config['password']}"
            f"@{config['host']}:{config['port']}/{config['database']}"
        )
        
        print(f"üìÅ ƒêang ƒë·ªçc file: {csv_file}")
        print(f"üîó K·∫øt n·ªëi ƒë·∫øn: {config['host']}:{config['port']}/{config['database']}")
        
        # T·∫°o engine
        engine = create_engine(connection_string)
        
        # ƒê·ªçc CSV
        df = pd.read_csv(csv_file)
        print(f"‚úÖ ƒê√£ ƒë·ªçc {len(df):,} d√≤ng t·ª´ CSV")
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        df.columns = [
            'invoice_no', 'stock_code', 'description', 'quantity',
            'invoice_date', 'unit_price', 'customer_id', 'country'
        ]
        
        df['invoice_date'] = pd.to_datetime(df['invoice_date'])
        df['customer_id'] = df['customer_id'].fillna(0).astype(int)
        
        # Insert v√†o MySQL
        print(f"üì§ ƒêang insert v√†o MySQL (batch size: {batch_size})...")
        df.to_sql(
            name='online_retail',
            con=engine,
            if_exists='append',
            index=False,
            chunksize=batch_size,
            method='multi'
        )
        
        print(f"‚úÖ Ho√†n th√†nh! ƒê√£ insert {len(df):,} d√≤ng")
        return True
        
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {csv_file}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("LOAD CSV V√ÄO MYSQL (Secure Mode)")
    print("=" * 60)
    
    # Ki·ªÉm tra .env file
    if not os.path.exists('.env'):
        print("\n‚ö†Ô∏è  Ch∆∞a c√≥ file .env")
        print("üìù T·∫°o file .env t·ª´ .env.example:")
        print("   1. Copy .env.example th√†nh .env")
        print("   2. S·ª≠a th√¥ng tin trong .env")
        print("   3. Ch·∫°y l·∫°i script n√†y")
    else:
        load_csv_secure()
